Вам дано описание наследования классов исключений в следующем формате. 
<имя исключения 1> : <имя исключения 2> Это означает, что исключение 1 наследуется от исключения 2.
Или эквивалентно записи:
class Error1 extends Error2 {
}


Антон написал код, который выглядит следующим образом.
try {
   foo();
}
catch(<имя 1> e) {
   Console.writeln("<имя 1>");
}
Catch(<имя 2> e) {
   Console.writeln ("<имя 2>");
}
...
Костя посмотрел на этот код и указал Антону на то, что некоторые исключения можно не ловить, 
так как ранее в коде будет пойман их предок. Но Антон не помнит какие исключения наследуются от каких. 
Помогите ему выйти из неловкого положения и напишите программу, которая будет определять обработку каких 
исключений можно удалить из кода.

Формат входных данных
В первой строке входных данных содержится целое число n - число классов исключений.
В следующих n строках содержится описание наследования классов. В i-й строке указано от каких 
классов наследуется i-й класс. Обратите внимание, что класс может ни от кого не наследоваться.
 Гарантируется, что класс не наследуется сам от себя (прямо или косвенно), что класс не наследуется 
явно от одного класса более одного раза.
В следующей строке содержится число m - количество обрабатываемых исключений.
Следующие m строк содержат имена исключений в том порядке, в каком они были написаны у Антона в коде.
Гарантируется, что никакое исключение не обрабатывается дважды.
Формат выходных данных
Выведите в отдельной строке имя каждого исключения, обработку которого можно удалить из кода, не изменив
 при этом поведение программы. Имена следует выводить в том же порядке, в котором они идут во входных данных.
Пример теста 1
Рассмотрим код
try {
   foo();
}
catch (ZeroDivision e) {
   Console.writeln ("ZeroDivision");
}
catch (OSError) {
   Console.writeln ("OSError");
}
catch (ArithmeticError) {
   Console.writeln ("ArithmeticError");
}
catch (FileNotFoundError) {
   Console.writeln ("FileNotFoundError");
}

...


По условию этого теста, Костя посмотрел на этот код, и сказал Антону, что исключение FileNotFoundError можно 
не ловить, ведь мы уже ловим OSError -- предок FileNotFoundError
Sample Input:
4
ArithmeticError
ZeroDivisionError : ArithmeticError
OSError
FileNotFoundError : OSError
4
ZeroDivisionError
OSError
ArithmeticError
FileNotFoundError
Sample Output:
FileNotFoundError


Еще должны код должен сработать на этих примерах: (Это уже от меня :))
Sample Input:

4
winter
is
coming
OMG : winter is coming
4
winter
is

coming
OMG
Sample Output:

OMG
Sample Input:
4
BaseException
Exception : BaseException
LookupError : Exception 
KeyError : LookupError
2
BaseException
KeyError

Sample Output:
KeyError 

Sample Input:
10
1 : 5 
7 : 3 
8 : 7
2 : 7 
3 : 5 
4 : 10
5 : 9
10
6 : 4 
9 : 6
5
5
9
1
7
8
Sample Output:
1
7
8
Sample Input:
14
a
b : a
c : a
f : a
d : c 
g : d 
i : g
m : i
n : i
z : i
e : m 
y : z
x : z
w : e 
9
y
m
n
m 
d
e
g
a
f
Sample Output:
e
g
f

